{"version":3,"sources":["rekord-pubsub.min.js"],"names":["global","Rekord","PubSub","get","url","cache","LiveFactory","database","handlePublish","message","forceOffline","op","OP_SAVE","liveSave","key","model","OP_REMOVE","liveRemove","pubsub","channel","token","save","noop","remove","subscribe","debug","Debugs","PUBSUB_CREATED","onpublish","data","publish","$key","setLive","this"],"mappings":"CACA,SAAUA,EAAQC,EAAQC,GAOxB,QAASC,GAAIC,GAEX,MAAOA,KAAOC,GAAQA,EAAOD,GAAUC,EAAOD,GAAQ,GAAIF,GAAQE,GAGpE,QAASE,GAAYC,GAenB,QAASC,GAAcC,GAEfR,EAAOS,eAEND,EAAQE,KAAOC,GAElBL,EAASM,SAAUJ,EAAQK,IAAKL,EAAQM,OAErCN,EAAQE,KAAOK,GAElBT,EAASU,WAAYR,EAAQK,MAvBnC,IAAMP,EAASW,SAAWX,EAASY,UAAYZ,EAASa,MAEtD,OACEC,KAAMpB,EAAOqB,KACbC,OAAQtB,EAAOqB,KAInB,IAAIJ,GAASf,EAAKI,EAASW,QACvBC,EAAUD,EAAOM,UAAWjB,EAASY,QAASZ,EAASa,MAqB3D,OAnBAnB,GAAOwB,MAAOxB,EAAOyB,OAAOC,eAAgBT,GAiB5CC,EAAQS,UAAYpB,GAIlBW,QAASA,EACTD,OAAQA,EAERG,KAAM,SAASN,EAAOc,GAEd5B,EAAOS,cAEXS,EAAQW,SAENnB,GAAIC,EACJE,IAAKC,EAAMgB,OACXhB,MAAOc,KAKbN,OAAQ,SAASR,GAETd,EAAOS,cAEXS,EAAQW,SAENnB,GAAIK,EACJF,IAAKC,EAAMgB,WAnErB,GAAInB,GAAU,EACVI,EAAY,EAEZX,IAwEJJ,GAAO+B,QAAS1B,GAAa,IAE3B2B,KAAMA,KAAKhC,OAAQgC,KAAK/B","file":"rekord-pubsub.min.js","sourcesContent":["/* rekord-pubsub 1.4.1 - A rekord binding to pubsub - implementing Rekord.live by Philip Diffenderfer */\n(function(global, Rekord, PubSub)\n{\n  var OP_SAVE = 1;\n  var OP_REMOVE = 2;\n\n  var cache = {};\n\n  function get(url)\n  {\n    return url in cache ? cache[ url ] : ( cache[ url ] = new PubSub( url ) );\n  }\n\n  function LiveFactory(database)\n  {\n    if ( !database.pubsub || !database.channel || !database.token )\n    {\n      return {\n        save: Rekord.noop,\n        remove: Rekord.noop\n      };\n    }\n\n    var pubsub = get( database.pubsub );\n    var channel = pubsub.subscribe( database.channel, database.token );\n\n    Rekord.debug( Rekord.Debugs.PUBSUB_CREATED, pubsub );\n\n    function handlePublish(message)\n    {\n      if ( !Rekord.forceOffline )\n      {\n        if ( message.op === OP_SAVE )\n        {\n          database.liveSave( message.key, message.model );\n        }\n        if ( message.op === OP_REMOVE )\n        {\n          database.liveRemove( message.key );\n        }\n      }\n    }\n\n    channel.onpublish = handlePublish;\n\n    return {\n\n      channel: channel,\n      pubsub: pubsub,\n\n      save: function(model, data)\n      {\n        if ( !Rekord.forceOffline )\n        {\n          channel.publish(\n          {\n            op: OP_SAVE,\n            key: model.$key(),\n            model: data\n          });\n        }\n      },\n\n      remove: function(model)\n      {\n        if ( !Rekord.forceOffline )\n        {\n          channel.publish(\n          {\n            op: OP_REMOVE,\n            key: model.$key()\n          });\n        }\n      }\n\n    };\n  }\n\n  Rekord.setLive( LiveFactory, true );\n\n})( this, this.Rekord, this.PubSub );\n"],"sourceRoot":"/source/"}