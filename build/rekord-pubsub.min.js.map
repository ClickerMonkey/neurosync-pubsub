{"version":3,"sources":["rekord-pubsub.min.js"],"names":["root","factory","define","amd","Rekord","PubSub","module","exports","global","require","this","undefined","get","url","cache","LiveFactory","database","handlePublish","message","forceOffline","op","OP_SAVE","liveSave","key","model","OP_REMOVE","liveRemove","pubsub","channel","token","save","noop","remove","subscribe","debug","Debugs","PUBSUB_CREATED","onpublish","data","publish","$key","setLive"],"mappings":"CAEC,SAAUA,EAAMC,GAEO,kBAAXC,SAAyBA,OAAOC,IAGzCD,QAAQ,SAAU,UAAW,SAASE,EAAQC,GAC5C,MAAOJ,GAAQD,EAAMI,EAAQC,KAGN,gBAAXC,SAAuBA,OAAOC,QAK5CD,OAAOC,QAAUN,EAAQO,OAAQC,QAAQ,UAAWA,QAAQ,WAK5DT,EAAKI,OAASH,EAAQD,EAAMA,EAAKI,OAAQJ,EAAKK,SAEhDK,KAAM,SAASF,EAAQJ,EAAQC,EAAQM,GAQvC,QAASC,GAAIC,GAEX,MAAOA,KAAOC,GAAQA,EAAOD,GAAUC,EAAOD,GAAQ,GAAIR,GAAQQ,GAGpE,QAASE,GAAYC,GAenB,QAASC,GAAcC,GAEfd,EAAOe,eAEND,EAAQE,KAAOC,GAElBL,EAASM,SAAUJ,EAAQK,IAAKL,EAAQM,OAErCN,EAAQE,KAAOK,GAElBT,EAASU,WAAYR,EAAQK,MAvBnC,IAAMP,EAASW,SAAWX,EAASY,UAAYZ,EAASa,MAEtD,OACEC,KAAM1B,EAAO2B,KACbC,OAAQ5B,EAAO2B,KAInB,IAAIJ,GAASf,EAAKI,EAASW,QACvBC,EAAUD,EAAOM,UAAWjB,EAASY,QAASZ,EAASa,MAqB3D,OAnBAzB,GAAO8B,MAAO9B,EAAO+B,OAAOC,eAAgBT,GAiB5CC,EAAQS,UAAYpB,GAIlBW,QAASA,EACTD,OAAQA,EAERG,KAAM,SAASN,EAAOc,GAEdlC,EAAOe,cAEXS,EAAQW,SAENnB,GAAIC,EACJE,IAAKC,EAAMgB,OACXhB,MAAOc,KAKbN,OAAQ,SAASR,GAETpB,EAAOe,cAEXS,EAAQW,SAENnB,GAAIK,EACJF,IAAKC,EAAMgB,WAnErB,GAAInB,GAAU,EACVI,EAAY,EAEZX,IA0EJ,OAFAV,GAAOqC,QAAS1B,GAAa,GAEtBX","file":"rekord-pubsub.min.js","sourcesContent":["/* rekord-pubsub 1.4.2 - A rekord binding to pubsub - implementing Rekord.live by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define(['Rekord', 'PubSub'], function(Rekord, PubSub) { // jshint ignore:line\n      return factory(root, Rekord, PubSub);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global, require('Rekord'), require('PubSub'));  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root, root.Rekord, root.PubSub);\n  }\n}(this, function(global, Rekord, PubSub, undefined)\n{\n\n  var OP_SAVE = 1;\n  var OP_REMOVE = 2;\n\n  var cache = {};\n\n  function get(url)\n  {\n    return url in cache ? cache[ url ] : ( cache[ url ] = new PubSub( url ) );\n  }\n\n  function LiveFactory(database)\n  {\n    if ( !database.pubsub || !database.channel || !database.token )\n    {\n      return {\n        save: Rekord.noop,\n        remove: Rekord.noop\n      };\n    }\n\n    var pubsub = get( database.pubsub );\n    var channel = pubsub.subscribe( database.channel, database.token );\n\n    Rekord.debug( Rekord.Debugs.PUBSUB_CREATED, pubsub );\n\n    function handlePublish(message)\n    {\n      if ( !Rekord.forceOffline )\n      {\n        if ( message.op === OP_SAVE )\n        {\n          database.liveSave( message.key, message.model );\n        }\n        if ( message.op === OP_REMOVE )\n        {\n          database.liveRemove( message.key );\n        }\n      }\n    }\n\n    channel.onpublish = handlePublish;\n\n    return {\n\n      channel: channel,\n      pubsub: pubsub,\n\n      save: function(model, data)\n      {\n        if ( !Rekord.forceOffline )\n        {\n          channel.publish(\n          {\n            op: OP_SAVE,\n            key: model.$key(),\n            model: data\n          });\n        }\n      },\n\n      remove: function(model)\n      {\n        if ( !Rekord.forceOffline )\n        {\n          channel.publish(\n          {\n            op: OP_REMOVE,\n            key: model.$key()\n          });\n        }\n      }\n\n    };\n  }\n\n  Rekord.setLive( LiveFactory, true );\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}