{"version":3,"sources":["pubsub.js"],"names":["global","Rekord","PubSub","get","url","cache","LiveFactory","database","handlePublish","message","forceOffline","op","OP_SAVE","liveSave","key","model","OP_REMOVE","liveRemove","pubsub","channel","token","save","noop","remove","subscribe","debug","Debugs","PUBSUB_CREATED","onpublish","data","publish","$key","setLive","this"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,GAOA,QAAAC,GAAAC,GAEA,MAAAA,KAAAC,GAAAA,EAAAD,GAAAC,EAAAD,GAAA,GAAAF,GAAAE,GAGA,QAAAE,GAAAC,GAeA,QAAAC,GAAAC,GAEAR,EAAAS,eAEAD,EAAAE,KAAAC,GAEAL,EAAAM,SAAAJ,EAAAK,IAAAL,EAAAM,OAEAN,EAAAE,KAAAK,GAEAT,EAAAU,WAAAR,EAAAK,MAvBA,IAAAP,EAAAW,SAAAX,EAAAY,UAAAZ,EAAAa,MAEA,OACAC,KAAApB,EAAAqB,KACAC,OAAAtB,EAAAqB,KAIA,IAAAJ,GAAAf,EAAAI,EAAAW,QACAC,EAAAD,EAAAM,UAAAjB,EAAAY,QAAAZ,EAAAa,MAqBA,OAnBAnB,GAAAwB,MAAAxB,EAAAyB,OAAAC,eAAAT,GAiBAC,EAAAS,UAAApB,GAIAW,QAAAA,EACAD,OAAAA,EAEAG,KAAA,SAAAN,EAAAc,GAEA5B,EAAAS,cAEAS,EAAAW,SAEAnB,GAAAC,EACAE,IAAAC,EAAAgB,OACAhB,MAAAc,KAKAN,OAAA,SAAAR,GAEAd,EAAAS,cAEAS,EAAAW,SAEAnB,GAAAK,EACAF,IAAAC,EAAAgB,WAnEA,GAAAnB,GAAA,EACAI,EAAA,EAEAX,IAwEAJ,GAAA+B,QAAA1B,GAAA,IAEA2B,KAAAA,KAAAhC,OAAAgC,KAAA/B","file":"rekord-pubsub.min.js","sourcesContent":["(function(global, Rekord, PubSub)\n{\n  var OP_SAVE = 1;\n  var OP_REMOVE = 2;\n\n  var cache = {};\n\n  function get(url)\n  {\n    return url in cache ? cache[ url ] : ( cache[ url ] = new PubSub( url ) );\n  }\n\n  function LiveFactory(database)\n  {\n    if ( !database.pubsub || !database.channel || !database.token )\n    {\n      return {\n        save: Rekord.noop,\n        remove: Rekord.noop\n      };\n    }\n\n    var pubsub = get( database.pubsub );\n    var channel = pubsub.subscribe( database.channel, database.token );\n\n    Rekord.debug( Rekord.Debugs.PUBSUB_CREATED, pubsub );\n\n    function handlePublish(message)\n    {\n      if ( !Rekord.forceOffline )\n      {\n        if ( message.op === OP_SAVE )\n        {\n          database.liveSave( message.key, message.model );\n        }\n        if ( message.op === OP_REMOVE )\n        {\n          database.liveRemove( message.key );\n        }\n      }\n    }\n\n    channel.onpublish = handlePublish;\n\n    return {\n\n      channel: channel,\n      pubsub: pubsub,\n\n      save: function(model, data)\n      {\n        if ( !Rekord.forceOffline )\n        {\n          channel.publish(\n          {\n            op: OP_SAVE,\n            key: model.$key(),\n            model: data\n          });\n        }\n      },\n\n      remove: function(model)\n      {\n        if ( !Rekord.forceOffline )\n        {\n          channel.publish(\n          {\n            op: OP_REMOVE,\n            key: model.$key()\n          });\n        }\n      }\n\n    };\n  }\n\n  Rekord.setLive( LiveFactory, true );\n\n})( this, this.Rekord, this.PubSub );\n"],"sourceRoot":"/source/"}